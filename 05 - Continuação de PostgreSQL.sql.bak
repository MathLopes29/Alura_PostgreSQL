/* Trigger e Procedure */
create sequence instrutor.SQ_instrutor;

create table instrutor.TB_instrutor (
	id serial primary key,
	nome varchar(255) not null,
	salario decimal (10,2) not null
);

create table instrutor.TB_logInstrutores(
	id serial primary key,
	info varchar (255) not null,
	momento_criacao TIMESTAMP default CURRENT_TIMESTAMP
);

select * from instrutor.TB_instrutor;
select * from instrutor.TB_logInstrutores;
update instrutor.TB_instrutor set id = 10 where id = 14;
update instrutor.TB_logInstrutores set id = 2 where id = 3;
delete from instrutor.TB_instrutor where id = 10;
delete from instrutor.TB_logInstrutores where id = 1;

insert into instrutor.TB_Instrutor (nome, salario) values 
('Lucas', 500),
('Thiago', 800),
('Marcos',900),
('Ana',750),
('Giovanna',680),
('Felipe',799),
('Matheus',689),
('Maria',760);

-- Queremos inserir dados na tabela criada
create or replace function instrutor.PROC_logInstrutores()
 returns trigger as $$
	declare 
	media_salarial decimal (10,2);
	total_instrutor integer default 0;
	instrutores_recebem_menos integer default 0;
	percentual decimal(5,2);
	logs_inseridos integer;
 begin
	select avg (salario) into media_salarial from instrutor.TB_instrutor where id <> new.id;
	
	if new.salario > media_salarial then
		insert into instrutor.TB_logInstrutores (info) values (new.nome || ' Recebe salário ácima da média');
		
		get diagnostics logs_inseridos = row_count; 
		if(logs_inseridos > 1) then
			raise exception 'Algo de Errado Aconteceu!'
		end if;
		
		return null;
	else 
		insert into instrutor.TB_logInstrutores (info) values (new.nome || ' Recebe salário ábaixo da média');
		return null;
	end if;
	
	for new.salario in select TB_instrutor.salario from instrutor where id <> new.id loop
		total_instrutor := total_instrutor+1;
		
		raise notice'Salário inserido: % enquanto o salário existente é: %', new.salario, salario;		
		
		if new.salario > salario then
			instrutores_recebem_menos := instrutores_recebem_menos+1;
		end if;
	end loop;
												   
	percentual = instrutores_recebem_menos::decimal / total_instrutor::decimal * 100;
	assert percentual < 100::decimal, 'Instrutores novos não podem receber mais que todos os antigos!';
			   
	if percentual = 100::decimal then
		return null;
		raise exception 'Erro!';
	end if;
	
	insert into TB_logInstrutores (info) 
		values (new.nome || percentual ||' Recebe mais do que X% da grade de instrutores');
	return new;	
	
	exception 
	when undefield_column then 
		raise notice 'Erro de undefield column!';
		raise exception 'Erro Tente Novamente'; 
		return new;
 	
 end;
 $$ language plpgsql;

drop trigger TRIG_instrutor on instrutor.TB_instrutor;

create trigger TRIG_instrutor
	after insert on instrutor.TB_instrutor
	for each row
	execute procedure PROC_logInstrutores();


start transaction;	
Insert into instrutor.TB_instrutor (nome, salario) 
	values ('Mariana', 759); 
commit;